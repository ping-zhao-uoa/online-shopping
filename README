- Reason why you used specific frameworks and libraries for the front-end and back-end 

  The whole solution is comprised of front-end (HTML, JS, CSS, etc.) and back-end Java code. 
  The front-end is separated from the back-end and communicates with back-end through RESTful APIs.

  In front-end, the main page contains three sections: stock information, user's shopping interface, and user's purchase history.
  JQuery is used to manage the first two sections since the DOM operation/manipulation is pretty simple.
  AngularJS is used to manage the third section since the latter involves some logic and AngularJS can easily handle complex logic using its MVC architecture.
  
  In back-end, a RESTful service is implemented using Jersey library. 
  The concrete process is dedicated to the business layer classes to make it easier for extension.
  Junit and AssertJ (a fluent-programming based assession library) are used to implement the unit test.
  
  
- How the persistent layer could be implemented?
  At the moment, neither the stock data nor the users' purchase data is persisted. However, both them need to be persisted in DB for both
  security and performance purpose.
  
  For small-scale and median-scale sites, RDBMS such as Oracle plus Hibernate can do the persistence job, whereas NoSQL DB such as Cassandra 
  or MongoDB might be needed for large-scale sites when horizontal/linear scalability is required.


- How long did it take yo to create the code?
  It took me 12 hours to finish the code. Below is the breakdown.
  	Design, documentation: 1 hour
  	Project setup plus skeleton code: 3 hours
  	Backend coding, including testing: 4 hours
  	Front coding: 4 hours
  

- Artefacts
  Runnable Tomcat package “apache-tomcat-8.5.5”.
  Source code “source-code”.


- Installation
  Java 8 running environment has been set up correctly.
  Locate to the runnable Tomcat package "apache-tomcat-8.5.5", run "{location_of_apache-tomcat-8.5.5}/bin/catalina.sh start".
